
const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");

const databasePath = path.join(__dirname, "gamingdata.db");

const app = express();

app.use(express.json());

let database = null;

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: databasePath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () =>
      console.log("Server Running at http://localhost:3000/")
    );
  } catch (error) {
    console.log(`DB Error: ${error.message}`);
    process.exit(1);
  }
};

initializeDbAndServer();

let payload1 = {
  u1id: 1,
  u2id: 2,
  scoreU1: 30,
  scoreU2: 40,
  win: false,
  gameid: 1,
};
let payload2 = {
  u1id: 2,
  u2id: 3,
  scoreU1: 45,
  scoreU2: 40,
  win: true,
  gameid: 1,
};
let payload3 = {
  u1id: 1,
  u2id: 3,
  scoreU1: 45,
  scoreU2: 40,
  win: true,
  gameid: 2,
};

app.post("/login", async (request, response) => {
  const { phonenumber, password } = request.body;
  const selectuserQuery = `SELECT * FROM user WHERE phonenumber = '${phonenumber}'`;
  const dbUser = await db.get(selectUserQuery);
  if (dbUser === undefined) {
    response.status(400);
    response.send("Invalid User");
  } else {
    const isPasswordMatched = await bcrypt.compare(password, dbUser.password);
    if (isPasswordMatched === true) {
      const payload = {
        phonenumber: phonenumber,
      };
      const jwtToken = jwt.sign(payload, "MY_SECRET_TOKEN");
      response.send({ jwtToken });
    } else {
      response.status(400);
      response.send("Invalid Password");
    }
  }
});

app.put("/games/:gameId/", async (request, response) => {
  const { gameId } = request.params;
  const gameDetails = request.body;
  const { password, game_id, game_name, game_type, team_members } = gameDetails;
  const updategameQuery = `
    UPDATE
      game
    SET
       password='${password}',
    game_id=${game_id},
    game_name='${game_name},
    game_type='${game_type},
    team_members=${team_members}
      
    WHERE
      game_id = ${gameId};`;
  await db.run(updategameQuery);
  response.send("gameinformation Updated Successfully");
});

app.get("/games/", (request, response) => {
  let jwtToken;
  const authHeader = request.headers["authorization"];
  if (authHeader !== undefined) {
    jwtToken = authHeader.split(" ")[1];
  }
  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid Access Token");
  } else {
    jwt.verify(jwtToken, "MY_SECRET_TOKEN", async (error, payload) => {
      if (error) {
        response.send("Invalid Access Token");
      } else {
        const getlistofgames = `
            SELECT
              *
            FROM
             games
            ORDER BY
             game_id;`;
        const gamelist = await db.all(getlistofgames);
        response.send(gamelist);
      }
    });
  }
});
